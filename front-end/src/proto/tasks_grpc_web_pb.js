/**
 * @fileoverview gRPC-Web generated client stub for tasks
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.9
// source: tasks.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = {};
proto.tasks = require('./tasks_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.tasks.TaskServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.tasks.TaskServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.Task,
 *   !proto.tasks.TaskId>}
 */
const methodDescriptor_TaskService_createTask = new grpc.web.MethodDescriptor(
  '/tasks.TaskService/createTask',
  grpc.web.MethodType.UNARY,
  proto.tasks.Task,
  proto.tasks.TaskId,
  /**
   * @param {!proto.tasks.Task} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tasks.TaskId.deserializeBinary
);


/**
 * @param {!proto.tasks.Task} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tasks.TaskId)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.TaskId>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TaskServiceClient.prototype.createTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.TaskService/createTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_createTask,
      callback);
};


/**
 * @param {!proto.tasks.Task} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tasks.TaskId>}
 *     Promise that resolves to the response
 */
proto.tasks.TaskServicePromiseClient.prototype.createTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.TaskService/createTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_createTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.Task,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_TaskService_updateTask = new grpc.web.MethodDescriptor(
  '/tasks.TaskService/updateTask',
  grpc.web.MethodType.UNARY,
  proto.tasks.Task,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.tasks.Task} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.tasks.Task} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TaskServiceClient.prototype.updateTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.TaskService/updateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_updateTask,
      callback);
};


/**
 * @param {!proto.tasks.Task} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.tasks.TaskServicePromiseClient.prototype.updateTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.TaskService/updateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_updateTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.TaskId,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_TaskService_deleteTask = new grpc.web.MethodDescriptor(
  '/tasks.TaskService/deleteTask',
  grpc.web.MethodType.UNARY,
  proto.tasks.TaskId,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.tasks.TaskId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.tasks.TaskId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TaskServiceClient.prototype.deleteTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.TaskService/deleteTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_deleteTask,
      callback);
};


/**
 * @param {!proto.tasks.TaskId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.tasks.TaskServicePromiseClient.prototype.deleteTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.TaskService/deleteTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_deleteTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.Category,
 *   !proto.tasks.Task>}
 */
const methodDescriptor_TaskService_listTasks = new grpc.web.MethodDescriptor(
  '/tasks.TaskService/listTasks',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.tasks.Category,
  proto.tasks.Task,
  /**
   * @param {!proto.tasks.Category} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tasks.Task.deserializeBinary
);


/**
 * @param {!proto.tasks.Category} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.Task>}
 *     The XHR Node Readable Stream
 */
proto.tasks.TaskServiceClient.prototype.listTasks =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/tasks.TaskService/listTasks',
      request,
      metadata || {},
      methodDescriptor_TaskService_listTasks);
};


/**
 * @param {!proto.tasks.Category} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.Task>}
 *     The XHR Node Readable Stream
 */
proto.tasks.TaskServicePromiseClient.prototype.listTasks =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/tasks.TaskService/listTasks',
      request,
      metadata || {},
      methodDescriptor_TaskService_listTasks);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.CategoryId,
 *   !proto.tasks.TaskCount>}
 */
const methodDescriptor_TaskService_countTasks = new grpc.web.MethodDescriptor(
  '/tasks.TaskService/countTasks',
  grpc.web.MethodType.UNARY,
  proto.tasks.CategoryId,
  proto.tasks.TaskCount,
  /**
   * @param {!proto.tasks.CategoryId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tasks.TaskCount.deserializeBinary
);


/**
 * @param {!proto.tasks.CategoryId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tasks.TaskCount)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.TaskCount>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TaskServiceClient.prototype.countTasks =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.TaskService/countTasks',
      request,
      metadata || {},
      methodDescriptor_TaskService_countTasks,
      callback);
};


/**
 * @param {!proto.tasks.CategoryId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tasks.TaskCount>}
 *     Promise that resolves to the response
 */
proto.tasks.TaskServicePromiseClient.prototype.countTasks =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.TaskService/countTasks',
      request,
      metadata || {},
      methodDescriptor_TaskService_countTasks);
};


module.exports = proto.tasks;

